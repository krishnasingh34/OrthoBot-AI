import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Link, useLocation } from 'react-router-dom';
import '../CSS/Navbar.css';
import orthobotLogo from '../assets/orthobot.jpg';

const Navbar = ({ scrollToTop }) => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [activeSection, setActiveSection] = useState('home');

  const location = useLocation();
  const navLinks = [
    { name: 'Home', path: '/', section: 'home' },
    { name: 'Features', path: '/#features', section: 'features' },
    { name: 'How it Works', path: '/#how-it-works', section: 'how-it-works' },
    { name: 'FAQs', path: '/#faqs', section: 'faqs' },
    { name: 'About Us', path: '/about', section: 'about' },
    { name: 'Contact Us', path: '/contact', section: 'contact' },
    { name: 'Login/Signup', path: '/chat', section: 'auth' }
  ];

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const handleNavClick = (path, sectionName) => {
    setActiveSection(sectionName);
    setIsMenuOpen(false);
    
    // If it's a hash link on the home page
    if (path.startsWith('/#')) {
      const elementId = path.substring(2);
      const element = document.getElementById(elementId);
      if (element) {
        const navbarHeight = 60; // Height of fixed navbar
        const elementPosition = element.offsetTop - navbarHeight;
        
        window.scrollTo({
          top: elementPosition,
          behavior: 'smooth'
        });
      }
    }
  };

  // Close mobile menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (isMenuOpen && !event.target.closest('.navbar')) {
        setIsMenuOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isMenuOpen]);

  // Update active section based on route
  useEffect(() => {
    const path = location.pathname;
    if (path === '/') {
      const handleScroll = () => {
        const sections = ['home', 'features', 'how-it-works', 'faqs'];
        const scrollPosition = window.scrollY + 150;
        
        for (const section of sections) {
          const element = document.getElementById(section);
          if (element) {
            const rect = element.getBoundingClientRect();
            const sectionTop = rect.top + window.scrollY;
            const sectionHeight = rect.height;
            
            if (scrollPosition >= sectionTop - 100 && 
                scrollPosition < sectionTop + sectionHeight - 100) {
              setActiveSection(section);
              break;
            }
          }
        }
      };
      
      window.addEventListener('scroll', handleScroll, { passive: true });
      handleScroll(); // Initial check
      
      return () => {
        window.removeEventListener('scroll', handleScroll);
      };
    } else {
      // For other routes, set active section based on path
      const section = path.substring(1); // Remove leading '/'
      setActiveSection(section);
    }
  }, [location]);

  return (
    <motion.nav 
      className="navbar"
      initial={{ y: -100, opacity: 0 }}
      animate={{ y: 0, opacity: 1 }}
      transition={{ duration: 0.6, ease: "easeOut" }}
    >
      <div className="navbar-container">
        {/* Logo Section */}
        <Link to="/" className="logo-container" onClick={scrollToTop}>
          <img src={orthobotLogo} alt="OrthoBot AI Logo" className="logo" />
          <span className="logo-text">OrthoBot AI</span>
        </Link>

        {/* Desktop Navigation Links */}
        <div className="navbar-links">
          <ul>
            {navLinks.map((link, index) => (
              <li key={index}>
                {link.path.startsWith('#') ? (
                  <a
                    href={link.path}
                    className={`nav-link ${activeSection === link.section ? 'active' : ''}`}
                    onClick={(e) => {
                      e.preventDefault();
                      handleNavClick(link.path, link.section);
                    }}
                  >
                    {link.name}
                  </a>
                ) : (
                  <Link
                    to={link.path}
                    className={`nav-link ${activeSection === link.section ? 'active' : ''}`}
                    onClick={() => handleNavClick(link.path, link.section)}
                  >
                    {link.name}
                  </Link>
                )}
              </li>
            ))}
          </ul>
        </div>

        {/* Mobile Menu Toggle */}
        <div className="mobile-menu-toggle" onClick={toggleMenu}>
          <motion.div
            className={`hamburger ${isMenuOpen ? 'open' : ''}`}
            animate={isMenuOpen ? "open" : "closed"}
          >
            <motion.span
              variants={{
                closed: { rotate: 0, y: 0 },
                open: { rotate: 45, y: 8 }
              }}
              transition={{ duration: 0.3 }}
            />
            <motion.span
              variants={{
                closed: { opacity: 1 },
                open: { opacity: 0 }
              }}
              transition={{ duration: 0.3 }}
            />
            <motion.span
              variants={{
                closed: { rotate: 0, y: 0 },
                open: { rotate: -45, y: -8 }
              }}
              transition={{ duration: 0.3 }}
            />
          </motion.div>
        </div>
      </div>

      {/* Mobile Menu Drawer */}
      <motion.div
        className={`mobile-menu ${isMenuOpen ? 'open' : ''}`}
        initial={{ x: '100%' }}
        animate={{ x: isMenuOpen ? 0 : '100%' }}
        transition={{ duration: 0.3, ease: "easeInOut" }}
      >
        <div className="mobile-menu-content">
          {navLinks.map((link, index) => (
            <motion.a
              key={index}
              href={link.href}
              className={`mobile-nav-link ${activeSection === link.name.toLowerCase().replace(/\s+/g, '-') ? 'active' : ''}`}
              onClick={(e) => {
                e.preventDefault();
                handleNavClick(link.href, link.name);
              }}
              initial={{ opacity: 0, x: 50 }}
              animate={{ 
                opacity: isMenuOpen ? 1 : 0, 
                x: isMenuOpen ? 0 : 50 
              }}
              transition={{ 
                duration: 0.3, 
                delay: isMenuOpen ? index * 0.1 : 0 
              }}
              whileTap={{ scale: 0.95 }}
            >
              {link.name}
            </motion.a>
          ))}
        </div>
      </motion.div>

      {/* Mobile Menu Overlay */}
      {isMenuOpen && (
        <motion.div
          className="mobile-menu-overlay"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.3 }}
          onClick={() => setIsMenuOpen(false)}
        />
      )}
    </motion.nav>
  );
};

export default Navbar;
